{"ast":null,"code":"/*\n * core.js: Core functionality for the Flatiron HTTP (with SPDY support) plugin.\n *\n * (C) 2011, Charlie Robbins & the Contributors\n * MIT LICENSE\n *\n */\n\nvar http = require('http'),\n  https = require('https'),\n  fs = require('fs'),\n  stream = require('stream'),\n  HttpStream = require('./http-stream'),\n  RoutingStream = require('./routing-stream');\nvar core = exports;\ncore.createServer = function (options) {\n  var isArray = Array.isArray(options.after),\n    credentials;\n  if (!options) {\n    throw new Error('options is required to create a server');\n  }\n  function requestHandler(req, res) {\n    var routingStream = new RoutingStream({\n      before: options.before,\n      buffer: options.buffer,\n      //\n      // Remark: without new after is a huge memory leak that\n      // pipes to every single open connection\n      //\n      after: isArray && options.after.map(function (After) {\n        return new After();\n      }),\n      request: req,\n      response: res,\n      limit: options.limit,\n      headers: options.headers\n    });\n    routingStream.on('error', function (err) {\n      var fn = options.onError || core.errorHandler;\n      fn(err, routingStream, routingStream.target, function () {\n        routingStream.target.emit('next');\n      });\n    });\n    req.pipe(routingStream);\n  }\n\n  //\n  // both https and spdy requires same params\n  //\n  if (options.https || options.spdy) {\n    if (options.https && options.spdy) {\n      throw new Error('You shouldn\\'t be using https and spdy simultaneously.');\n    }\n    var serverOptions,\n      credentials,\n      key = !options.spdy ? 'https' : 'spdy';\n    serverOptions = options[key];\n    if (!serverOptions.key || !serverOptions.cert) {\n      throw new Error('Both options.' + key + '.`key` and options.' + key + '.`cert` are required.');\n    }\n    credentials = {\n      key: fs.readFileSync(serverOptions.key),\n      cert: fs.readFileSync(serverOptions.cert)\n    };\n    if (serverOptions.ca) {\n      serverOptions.ca = !Array.isArray(serverOptions.ca) ? [serverOptions.ca] : serverOptions.ca;\n      credentials.ca = serverOptions.ca.map(function (ca) {\n        return fs.readFileSync(ca);\n      });\n    }\n    if (options.spdy) {\n      // spdy is optional so we require module here rather than on top\n      var spdy = require('spdy');\n      return spdy.createServer(credentials, requestHandler);\n    }\n    return https.createServer(credentials, requestHandler);\n  }\n  return http.createServer(requestHandler);\n};\ncore.errorHandler = function error(err, req, res) {\n  if (err) {\n    (this.res || res).writeHead(err.status || 500, err.headers || {\n      \"Content-Type\": \"text/plain\"\n    });\n    (this.res || res).end(err.message + \"\\n\");\n    return;\n  }\n  (this.res || res).writeHead(404, {\n    \"Content-Type\": \"text/plain\"\n  });\n  (this.res || res).end(\"Not Found\\n\");\n};","map":{"version":3,"names":["http","require","https","fs","stream","HttpStream","RoutingStream","core","exports","createServer","options","isArray","Array","after","credentials","Error","requestHandler","req","res","routingStream","before","buffer","map","After","request","response","limit","headers","on","err","fn","onError","errorHandler","target","emit","pipe","spdy","serverOptions","key","cert","readFileSync","ca","error","writeHead","status","end","message"],"sources":["/Users/juancvegao/Documents/PROGRAMMING/REACT/ejerciciosUniversidad/notes_github/frontend/node_modules/union/lib/core.js"],"sourcesContent":["/*\n * core.js: Core functionality for the Flatiron HTTP (with SPDY support) plugin.\n *\n * (C) 2011, Charlie Robbins & the Contributors\n * MIT LICENSE\n *\n */\n\nvar http = require('http'),\n    https = require('https'),\n    fs = require('fs'),\n    stream = require('stream'),\n    HttpStream = require('./http-stream'),\n    RoutingStream = require('./routing-stream');\n\nvar core = exports;\n\ncore.createServer = function (options) {\n  var isArray = Array.isArray(options.after),\n      credentials;\n\n  if (!options) {\n    throw new Error('options is required to create a server');\n  }\n\n  function requestHandler(req, res) {\n    var routingStream = new RoutingStream({\n      before: options.before,\n      buffer: options.buffer,\n      //\n      // Remark: without new after is a huge memory leak that\n      // pipes to every single open connection\n      //\n      after: isArray && options.after.map(function (After) {\n        return new After;\n      }),\n      request: req,\n      response: res,\n      limit: options.limit,\n      headers: options.headers\n    });\n\n    routingStream.on('error', function (err) {\n      var fn = options.onError || core.errorHandler;\n      fn(err, routingStream, routingStream.target, function () {\n        routingStream.target.emit('next');\n      });\n    });\n\n    req.pipe(routingStream);\n  }\n\n  //\n  // both https and spdy requires same params\n  //\n  if (options.https || options.spdy) {\n    if (options.https && options.spdy) {\n      throw new Error('You shouldn\\'t be using https and spdy simultaneously.');\n    }\n\n    var serverOptions,\n        credentials,\n        key = !options.spdy\n          ? 'https'\n          : 'spdy';\n\n    serverOptions = options[key];\n    if (!serverOptions.key || !serverOptions.cert) {\n      throw new Error('Both options.' + key + '.`key` and options.' + key + '.`cert` are required.');\n    }\n\n    credentials = {\n      key:  fs.readFileSync(serverOptions.key),\n      cert: fs.readFileSync(serverOptions.cert)\n    };\n\n    if (serverOptions.ca) {\n      serverOptions.ca = !Array.isArray(serverOptions.ca)\n        ? [serverOptions.ca]\n        : serverOptions.ca\n\n      credentials.ca = serverOptions.ca.map(function (ca) {\n        return fs.readFileSync(ca);\n      });\n    }\n\n    if (options.spdy) {\n      // spdy is optional so we require module here rather than on top\n      var spdy = require('spdy');\n      return spdy.createServer(credentials, requestHandler);\n    }\n\n    return https.createServer(credentials, requestHandler);\n  }\n\n  return http.createServer(requestHandler);\n};\n\ncore.errorHandler = function error(err, req, res) {\n  if (err) {\n    (this.res || res).writeHead(err.status || 500, err.headers || { \"Content-Type\": \"text/plain\" });\n    (this.res || res).end(err.message + \"\\n\");\n    return;\n  }\n\n  (this.res || res).writeHead(404, {\"Content-Type\": \"text/plain\"});\n  (this.res || res).end(\"Not Found\\n\");\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}