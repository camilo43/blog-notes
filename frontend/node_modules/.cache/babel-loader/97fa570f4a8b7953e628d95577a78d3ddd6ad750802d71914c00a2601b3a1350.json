{"ast":null,"code":"var assert = require('assert');\nvar util = require('util');\nvar Buffer = require('buffer').Buffer;\n\n// Node.js version\nvar mode = /^v0\\.8\\./.test(process.version) ? 'rusty' : /^v0\\.(9|10)\\./.test(process.version) ? 'old' : /^v0\\.12\\./.test(process.version) ? 'normal' : 'modern';\nvar HTTPParser;\nvar methods;\nvar reverseMethods;\nvar kOnHeaders;\nvar kOnHeadersComplete;\nvar kOnMessageComplete;\nvar kOnBody;\nif (mode === 'normal' || mode === 'modern') {\n  HTTPParser = process.binding('http_parser').HTTPParser;\n  methods = HTTPParser.methods;\n\n  // v6\n  if (!methods) methods = process.binding('http_parser').methods;\n  reverseMethods = {};\n  methods.forEach(function (method, index) {\n    reverseMethods[method] = index;\n  });\n  kOnHeaders = HTTPParser.kOnHeaders | 0;\n  kOnHeadersComplete = HTTPParser.kOnHeadersComplete | 0;\n  kOnMessageComplete = HTTPParser.kOnMessageComplete | 0;\n  kOnBody = HTTPParser.kOnBody | 0;\n} else {\n  kOnHeaders = 'onHeaders';\n  kOnHeadersComplete = 'onHeadersComplete';\n  kOnMessageComplete = 'onMessageComplete';\n  kOnBody = 'onBody';\n}\nfunction Deceiver(socket, options) {\n  this.socket = socket;\n  this.options = options || {};\n  this.isClient = this.options.isClient;\n}\nmodule.exports = Deceiver;\nDeceiver.create = function create(stream, options) {\n  return new Deceiver(stream, options);\n};\nDeceiver.prototype._toHeaderList = function _toHeaderList(object) {\n  var out = [];\n  var keys = Object.keys(object);\n  for (var i = 0; i < keys.length; i++) out.push(keys[i], object[keys[i]]);\n  return out;\n};\nDeceiver.prototype._isUpgrade = function _isUpgrade(request) {\n  return request.method === 'CONNECT' || request.headers.upgrade || request.headers.connection && /(^|\\W)upgrade(\\W|$)/i.test(request.headers.connection);\n};\n\n// TODO(indutny): support CONNECT\nif (mode === 'modern') {\n  /*\n  function parserOnHeadersComplete(versionMajor, versionMinor, headers, method,\n                                   url, statusCode, statusMessage, upgrade,\n                                   shouldKeepAlive) {\n   */\n  Deceiver.prototype.emitRequest = function emitRequest(request) {\n    var parser = this.socket.parser;\n    assert(parser, 'No parser present');\n    parser.execute = null;\n    var self = this;\n    var method = reverseMethods[request.method];\n    parser.execute = function execute() {\n      self._skipExecute(this);\n      this[kOnHeadersComplete](1, 1, self._toHeaderList(request.headers), method, request.path, 0, '', self._isUpgrade(request), true);\n      return 0;\n    };\n    this._emitEmpty();\n  };\n  Deceiver.prototype.emitResponse = function emitResponse(response) {\n    var parser = this.socket.parser;\n    assert(parser, 'No parser present');\n    parser.execute = null;\n    var self = this;\n    parser.execute = function execute() {\n      self._skipExecute(this);\n      this[kOnHeadersComplete](1, 1, self._toHeaderList(response.headers), response.path, response.code, response.status, response.reason || '', self._isUpgrade(response), true);\n      return 0;\n    };\n    this._emitEmpty();\n  };\n} else {\n  /*\n    `function parserOnHeadersComplete(info) {`\n     info = { .versionMajor, .versionMinor, .url, .headers, .method,\n             .statusCode, .statusMessage, .upgrade, .shouldKeepAlive }\n   */\n  Deceiver.prototype.emitRequest = function emitRequest(request) {\n    var parser = this.socket.parser;\n    assert(parser, 'No parser present');\n    var method = request.method;\n    if (reverseMethods) method = reverseMethods[method];\n    var info = {\n      versionMajor: 1,\n      versionMinor: 1,\n      url: request.path,\n      headers: this._toHeaderList(request.headers),\n      method: method,\n      statusCode: 0,\n      statusMessage: '',\n      upgrade: this._isUpgrade(request),\n      shouldKeepAlive: true\n    };\n    var self = this;\n    parser.execute = function execute() {\n      self._skipExecute(this);\n      this[kOnHeadersComplete](info);\n      return 0;\n    };\n    this._emitEmpty();\n  };\n  Deceiver.prototype.emitResponse = function emitResponse(response) {\n    var parser = this.socket.parser;\n    assert(parser, 'No parser present');\n    var info = {\n      versionMajor: 1,\n      versionMinor: 1,\n      url: response.path,\n      headers: this._toHeaderList(response.headers),\n      method: false,\n      statusCode: response.status,\n      statusMessage: response.reason || '',\n      upgrade: this._isUpgrade(response),\n      shouldKeepAlive: true\n    };\n    var self = this;\n    parser.execute = function execute() {\n      self._skipExecute(this);\n      this[kOnHeadersComplete](info);\n      return 0;\n    };\n    this._emitEmpty();\n  };\n}\nDeceiver.prototype._skipExecute = function _skipExecute(parser) {\n  var self = this;\n  var oldExecute = parser.constructor.prototype.execute;\n  var oldFinish = parser.constructor.prototype.finish;\n  parser.execute = null;\n  parser.finish = null;\n  parser.execute = function execute(buffer, start, len) {\n    // Parser reuse\n    if (this.socket !== self.socket) {\n      this.execute = oldExecute;\n      this.finish = oldFinish;\n      return this.execute(buffer, start, len);\n    }\n    if (start !== undefined) buffer = buffer.slice(start, start + len);\n    self.emitBody(buffer);\n    return len;\n  };\n  parser.finish = function finish() {\n    // Parser reuse\n    if (this.socket !== self.socket) {\n      this.execute = oldExecute;\n      this.finish = oldFinish;\n      return this.finish();\n    }\n    this.execute = oldExecute;\n    this.finish = oldFinish;\n    self.emitMessageComplete();\n  };\n};\nDeceiver.prototype.emitBody = function emitBody(buffer) {\n  var parser = this.socket.parser;\n  assert(parser, 'No parser present');\n  parser[kOnBody](buffer, 0, buffer.length);\n};\nDeceiver.prototype._emitEmpty = function _emitEmpty() {\n  // Emit data to force out handling of UPGRADE\n  var empty = new Buffer(0);\n  if (this.socket.ondata) this.socket.ondata(empty, 0, 0);else this.socket.emit('data', empty);\n};\nDeceiver.prototype.emitMessageComplete = function emitMessageComplete() {\n  var parser = this.socket.parser;\n  assert(parser, 'No parser present');\n  parser[kOnMessageComplete]();\n};","map":{"version":3,"names":["assert","require","util","Buffer","mode","test","process","version","HTTPParser","methods","reverseMethods","kOnHeaders","kOnHeadersComplete","kOnMessageComplete","kOnBody","binding","forEach","method","index","Deceiver","socket","options","isClient","module","exports","create","stream","prototype","_toHeaderList","object","out","keys","Object","i","length","push","_isUpgrade","request","headers","upgrade","connection","emitRequest","parser","execute","self","_skipExecute","path","_emitEmpty","emitResponse","response","code","status","reason","info","versionMajor","versionMinor","url","statusCode","statusMessage","shouldKeepAlive","oldExecute","constructor","oldFinish","finish","buffer","start","len","undefined","slice","emitBody","emitMessageComplete","empty","ondata","emit"],"sources":["/Users/juancvegao/Documents/PROGRAMMING/REACT/ejerciciosUniversidad/notes_github/frontend/node_modules/http-deceiver/lib/deceiver.js"],"sourcesContent":["var assert = require('assert');\nvar util = require('util');\n\nvar Buffer = require('buffer').Buffer;\n\n// Node.js version\nvar mode = /^v0\\.8\\./.test(process.version) ? 'rusty' :\n           /^v0\\.(9|10)\\./.test(process.version) ? 'old' :\n           /^v0\\.12\\./.test(process.version) ? 'normal' :\n           'modern';\n\nvar HTTPParser;\n\nvar methods;\nvar reverseMethods;\n\nvar kOnHeaders;\nvar kOnHeadersComplete;\nvar kOnMessageComplete;\nvar kOnBody;\nif (mode === 'normal' || mode === 'modern') {\n  HTTPParser = process.binding('http_parser').HTTPParser;\n  methods = HTTPParser.methods;\n\n  // v6\n  if (!methods)\n    methods = process.binding('http_parser').methods;\n\n  reverseMethods = {};\n\n  methods.forEach(function(method, index) {\n    reverseMethods[method] = index;\n  });\n\n  kOnHeaders = HTTPParser.kOnHeaders | 0;\n  kOnHeadersComplete = HTTPParser.kOnHeadersComplete | 0;\n  kOnMessageComplete = HTTPParser.kOnMessageComplete | 0;\n  kOnBody = HTTPParser.kOnBody | 0;\n} else {\n  kOnHeaders = 'onHeaders';\n  kOnHeadersComplete = 'onHeadersComplete';\n  kOnMessageComplete = 'onMessageComplete';\n  kOnBody = 'onBody';\n}\n\nfunction Deceiver(socket, options) {\n  this.socket = socket;\n  this.options = options || {};\n  this.isClient = this.options.isClient;\n}\nmodule.exports = Deceiver;\n\nDeceiver.create = function create(stream, options) {\n  return new Deceiver(stream, options);\n};\n\nDeceiver.prototype._toHeaderList = function _toHeaderList(object) {\n  var out = [];\n  var keys = Object.keys(object);\n\n  for (var i = 0; i < keys.length; i++)\n    out.push(keys[i], object[keys[i]]);\n\n  return out;\n};\n\nDeceiver.prototype._isUpgrade = function _isUpgrade(request) {\n  return request.method === 'CONNECT' ||\n         request.headers.upgrade ||\n         request.headers.connection &&\n            /(^|\\W)upgrade(\\W|$)/i.test(request.headers.connection);\n};\n\n// TODO(indutny): support CONNECT\nif (mode === 'modern') {\n  /*\n  function parserOnHeadersComplete(versionMajor, versionMinor, headers, method,\n                                   url, statusCode, statusMessage, upgrade,\n                                   shouldKeepAlive) {\n   */\n  Deceiver.prototype.emitRequest = function emitRequest(request) {\n    var parser = this.socket.parser;\n    assert(parser, 'No parser present');\n\n    parser.execute = null;\n\n    var self = this;\n    var method = reverseMethods[request.method];\n    parser.execute = function execute() {\n      self._skipExecute(this);\n      this[kOnHeadersComplete](1,\n                               1,\n                               self._toHeaderList(request.headers),\n                               method,\n                               request.path,\n                               0,\n                               '',\n                               self._isUpgrade(request),\n                               true);\n      return 0;\n    };\n\n    this._emitEmpty();\n  };\n\n  Deceiver.prototype.emitResponse = function emitResponse(response) {\n    var parser = this.socket.parser;\n    assert(parser, 'No parser present');\n\n    parser.execute = null;\n\n    var self = this;\n    parser.execute = function execute() {\n      self._skipExecute(this);\n      this[kOnHeadersComplete](1,\n                               1,\n                               self._toHeaderList(response.headers),\n                               response.path,\n                               response.code,\n                               response.status,\n                               response.reason || '',\n                               self._isUpgrade(response),\n                               true);\n      return 0;\n    };\n\n    this._emitEmpty();\n  };\n} else {\n  /*\n    `function parserOnHeadersComplete(info) {`\n\n    info = { .versionMajor, .versionMinor, .url, .headers, .method,\n             .statusCode, .statusMessage, .upgrade, .shouldKeepAlive }\n   */\n  Deceiver.prototype.emitRequest = function emitRequest(request) {\n    var parser = this.socket.parser;\n    assert(parser, 'No parser present');\n\n    var method = request.method;\n    if (reverseMethods)\n      method = reverseMethods[method];\n\n    var info = {\n      versionMajor: 1,\n      versionMinor: 1,\n      url: request.path,\n      headers: this._toHeaderList(request.headers),\n      method: method,\n      statusCode: 0,\n      statusMessage: '',\n      upgrade: this._isUpgrade(request),\n      shouldKeepAlive: true\n    };\n\n    var self = this;\n    parser.execute = function execute() {\n      self._skipExecute(this);\n      this[kOnHeadersComplete](info);\n      return 0;\n    };\n\n    this._emitEmpty();\n  };\n\n  Deceiver.prototype.emitResponse = function emitResponse(response) {\n    var parser = this.socket.parser;\n    assert(parser, 'No parser present');\n\n    var info = {\n      versionMajor: 1,\n      versionMinor: 1,\n      url: response.path,\n      headers: this._toHeaderList(response.headers),\n      method: false,\n      statusCode: response.status,\n      statusMessage: response.reason || '',\n      upgrade: this._isUpgrade(response),\n      shouldKeepAlive: true\n    };\n\n    var self = this;\n    parser.execute = function execute() {\n      self._skipExecute(this);\n      this[kOnHeadersComplete](info);\n      return 0;\n    };\n\n    this._emitEmpty();\n  };\n}\n\nDeceiver.prototype._skipExecute = function _skipExecute(parser) {\n  var self = this;\n  var oldExecute = parser.constructor.prototype.execute;\n  var oldFinish = parser.constructor.prototype.finish;\n\n  parser.execute = null;\n  parser.finish = null;\n\n  parser.execute = function execute(buffer, start, len) {\n    // Parser reuse\n    if (this.socket !== self.socket) {\n      this.execute = oldExecute;\n      this.finish = oldFinish;\n      return this.execute(buffer, start, len);\n    }\n\n    if (start !== undefined)\n      buffer = buffer.slice(start, start + len);\n    self.emitBody(buffer);\n    return len;\n  };\n\n  parser.finish = function finish() {\n    // Parser reuse\n    if (this.socket !== self.socket) {\n      this.execute = oldExecute;\n      this.finish = oldFinish;\n      return this.finish();\n    }\n\n    this.execute = oldExecute;\n    this.finish = oldFinish;\n    self.emitMessageComplete();\n  };\n};\n\nDeceiver.prototype.emitBody = function emitBody(buffer) {\n  var parser = this.socket.parser;\n  assert(parser, 'No parser present');\n\n  parser[kOnBody](buffer, 0, buffer.length);\n};\n\nDeceiver.prototype._emitEmpty = function _emitEmpty() {\n  // Emit data to force out handling of UPGRADE\n  var empty = new Buffer(0);\n  if (this.socket.ondata)\n    this.socket.ondata(empty, 0, 0);\n  else\n    this.socket.emit('data', empty);\n};\n\nDeceiver.prototype.emitMessageComplete = function emitMessageComplete() {\n  var parser = this.socket.parser;\n  assert(parser, 'No parser present');\n\n  parser[kOnMessageComplete]();\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}