{"ast":null,"code":"'use strict';\n\nvar transport = require('../spdy-transport');\nvar utils = transport.utils;\nvar assert = require('assert');\nvar debug = require('debug')('spdy:priority');\nfunction PriorityNode(tree, options) {\n  this.tree = tree;\n  this.id = options.id;\n  this.parent = options.parent;\n  this.weight = options.weight;\n\n  // To be calculated in `addChild`\n  this.priorityFrom = 0;\n  this.priorityTo = 1;\n  this.priority = 1;\n  this.children = {\n    list: [],\n    weight: 0\n  };\n  if (this.parent !== null) {\n    this.parent.addChild(this);\n  }\n}\nfunction compareChildren(a, b) {\n  return a.weight === b.weight ? a.id - b.id : a.weight - b.weight;\n}\nPriorityNode.prototype.toJSON = function toJSON() {\n  return {\n    parent: this.parent,\n    weight: this.weight,\n    exclusive: this.exclusive\n  };\n};\nPriorityNode.prototype.getPriority = function getPriority() {\n  return this.priority;\n};\nPriorityNode.prototype.getPriorityRange = function getPriorityRange() {\n  return {\n    from: this.priorityFrom,\n    to: this.priorityTo\n  };\n};\nPriorityNode.prototype.addChild = function addChild(child) {\n  child.parent = this;\n  utils.binaryInsert(this.children.list, child, compareChildren);\n  this.children.weight += child.weight;\n  this._updatePriority(this.priorityFrom, this.priorityTo);\n};\nPriorityNode.prototype.remove = function remove() {\n  assert(this.parent, 'Can\\'t remove root node');\n  this.parent.removeChild(this);\n  this.tree._removeNode(this);\n\n  // Move all children to the parent\n  for (var i = 0; i < this.children.list.length; i++) {\n    this.parent.addChild(this.children.list[i]);\n  }\n};\nPriorityNode.prototype.removeChild = function removeChild(child) {\n  this.children.weight -= child.weight;\n  var index = utils.binarySearch(this.children.list, child, compareChildren);\n  if (index !== -1 && this.children.list.length >= index) {\n    this.children.list.splice(index, 1);\n  }\n};\nPriorityNode.prototype.removeChildren = function removeChildren() {\n  var children = this.children.list;\n  this.children.list = [];\n  this.children.weight = 0;\n  return children;\n};\nPriorityNode.prototype._updatePriority = function _updatePriority(from, to) {\n  this.priority = to - from;\n  this.priorityFrom = from;\n  this.priorityTo = to;\n  var weight = 0;\n  for (var i = 0; i < this.children.list.length; i++) {\n    var node = this.children.list[i];\n    var nextWeight = weight + node.weight;\n    node._updatePriority(from + this.priority * (weight / this.children.weight), from + this.priority * (nextWeight / this.children.weight));\n    weight = nextWeight;\n  }\n};\nfunction PriorityTree(options) {\n  this.map = {};\n  this.list = [];\n  this.defaultWeight = options.defaultWeight || 16;\n  this.count = 0;\n  this.maxCount = options.maxCount;\n\n  // Root\n  this.root = this.add({\n    id: 0,\n    parent: null,\n    weight: 1\n  });\n}\nmodule.exports = PriorityTree;\nPriorityTree.create = function create(options) {\n  return new PriorityTree(options);\n};\nPriorityTree.prototype.add = function add(options) {\n  if (options.id === options.parent) {\n    return this.addDefault(options.id);\n  }\n  var parent = options.parent === null ? null : this.map[options.parent];\n  if (parent === undefined) {\n    return this.addDefault(options.id);\n  }\n  debug('add node=%d parent=%d weight=%d exclusive=%d', options.id, options.parent === null ? -1 : options.parent, options.weight || this.defaultWeight, options.exclusive ? 1 : 0);\n  var children;\n  if (options.exclusive) {\n    children = parent.removeChildren();\n  }\n  var node = new PriorityNode(this, {\n    id: options.id,\n    parent: parent,\n    weight: options.weight || this.defaultWeight\n  });\n  this.map[options.id] = node;\n  if (options.exclusive) {\n    for (var i = 0; i < children.length; i++) {\n      node.addChild(children[i]);\n    }\n  }\n  this.count++;\n  if (this.count > this.maxCount) {\n    debug('hit maximum remove id=%d', this.list[0].id);\n    this.list.shift().remove();\n  }\n\n  // Root node is not subject to removal\n  if (node.parent !== null) {\n    this.list.push(node);\n  }\n  return node;\n};\n\n// Only for testing, should use `node`'s methods\nPriorityTree.prototype.get = function get(id) {\n  return this.map[id];\n};\nPriorityTree.prototype.addDefault = function addDefault(id) {\n  debug('creating default node');\n  return this.add({\n    id: id,\n    parent: 0,\n    weight: this.defaultWeight\n  });\n};\nPriorityTree.prototype._removeNode = function _removeNode(node) {\n  delete this.map[node.id];\n  var index = utils.binarySearch(this.list, node, compareChildren);\n  this.list.splice(index, 1);\n  this.count--;\n};","map":{"version":3,"names":["transport","require","utils","assert","debug","PriorityNode","tree","options","id","parent","weight","priorityFrom","priorityTo","priority","children","list","addChild","compareChildren","a","b","prototype","toJSON","exclusive","getPriority","getPriorityRange","from","to","child","binaryInsert","_updatePriority","remove","removeChild","_removeNode","i","length","index","binarySearch","splice","removeChildren","node","nextWeight","PriorityTree","map","defaultWeight","count","maxCount","root","add","module","exports","create","addDefault","undefined","shift","push","get"],"sources":["/Users/juancvegao/Documents/PROGRAMMING/REACT/ejerciciosUniversidad/notes_github/frontend/node_modules/spdy-transport/lib/spdy-transport/priority.js"],"sourcesContent":["'use strict'\n\nvar transport = require('../spdy-transport')\nvar utils = transport.utils\n\nvar assert = require('assert')\nvar debug = require('debug')('spdy:priority')\n\nfunction PriorityNode (tree, options) {\n  this.tree = tree\n\n  this.id = options.id\n  this.parent = options.parent\n  this.weight = options.weight\n\n  // To be calculated in `addChild`\n  this.priorityFrom = 0\n  this.priorityTo = 1\n  this.priority = 1\n\n  this.children = {\n    list: [],\n    weight: 0\n  }\n\n  if (this.parent !== null) {\n    this.parent.addChild(this)\n  }\n}\n\nfunction compareChildren (a, b) {\n  return a.weight === b.weight ? a.id - b.id : a.weight - b.weight\n}\n\nPriorityNode.prototype.toJSON = function toJSON () {\n  return {\n    parent: this.parent,\n    weight: this.weight,\n    exclusive: this.exclusive\n  }\n}\n\nPriorityNode.prototype.getPriority = function getPriority () {\n  return this.priority\n}\n\nPriorityNode.prototype.getPriorityRange = function getPriorityRange () {\n  return { from: this.priorityFrom, to: this.priorityTo }\n}\n\nPriorityNode.prototype.addChild = function addChild (child) {\n  child.parent = this\n  utils.binaryInsert(this.children.list, child, compareChildren)\n  this.children.weight += child.weight\n\n  this._updatePriority(this.priorityFrom, this.priorityTo)\n}\n\nPriorityNode.prototype.remove = function remove () {\n  assert(this.parent, 'Can\\'t remove root node')\n\n  this.parent.removeChild(this)\n  this.tree._removeNode(this)\n\n  // Move all children to the parent\n  for (var i = 0; i < this.children.list.length; i++) {\n    this.parent.addChild(this.children.list[i])\n  }\n}\n\nPriorityNode.prototype.removeChild = function removeChild (child) {\n  this.children.weight -= child.weight\n  var index = utils.binarySearch(this.children.list, child, compareChildren)\n  if (index !== -1 && this.children.list.length >= index) {\n    this.children.list.splice(index, 1)\n  }\n}\n\nPriorityNode.prototype.removeChildren = function removeChildren () {\n  var children = this.children.list\n  this.children.list = []\n  this.children.weight = 0\n  return children\n}\n\nPriorityNode.prototype._updatePriority = function _updatePriority (from, to) {\n  this.priority = to - from\n  this.priorityFrom = from\n  this.priorityTo = to\n\n  var weight = 0\n  for (var i = 0; i < this.children.list.length; i++) {\n    var node = this.children.list[i]\n    var nextWeight = weight + node.weight\n\n    node._updatePriority(\n      from + this.priority * (weight / this.children.weight),\n      from + this.priority * (nextWeight / this.children.weight)\n    )\n    weight = nextWeight\n  }\n}\n\nfunction PriorityTree (options) {\n  this.map = {}\n  this.list = []\n  this.defaultWeight = options.defaultWeight || 16\n\n  this.count = 0\n  this.maxCount = options.maxCount\n\n  // Root\n  this.root = this.add({\n    id: 0,\n    parent: null,\n    weight: 1\n  })\n}\nmodule.exports = PriorityTree\n\nPriorityTree.create = function create (options) {\n  return new PriorityTree(options)\n}\n\nPriorityTree.prototype.add = function add (options) {\n  if (options.id === options.parent) {\n    return this.addDefault(options.id)\n  }\n\n  var parent = options.parent === null ? null : this.map[options.parent]\n  if (parent === undefined) {\n    return this.addDefault(options.id)\n  }\n\n  debug('add node=%d parent=%d weight=%d exclusive=%d',\n    options.id,\n    options.parent === null ? -1 : options.parent,\n    options.weight || this.defaultWeight,\n    options.exclusive ? 1 : 0)\n\n  var children\n  if (options.exclusive) {\n    children = parent.removeChildren()\n  }\n\n  var node = new PriorityNode(this, {\n    id: options.id,\n    parent: parent,\n    weight: options.weight || this.defaultWeight\n  })\n  this.map[options.id] = node\n\n  if (options.exclusive) {\n    for (var i = 0; i < children.length; i++) {\n      node.addChild(children[i])\n    }\n  }\n\n  this.count++\n  if (this.count > this.maxCount) {\n    debug('hit maximum remove id=%d', this.list[0].id)\n    this.list.shift().remove()\n  }\n\n  // Root node is not subject to removal\n  if (node.parent !== null) {\n    this.list.push(node)\n  }\n\n  return node\n}\n\n// Only for testing, should use `node`'s methods\nPriorityTree.prototype.get = function get (id) {\n  return this.map[id]\n}\n\nPriorityTree.prototype.addDefault = function addDefault (id) {\n  debug('creating default node')\n  return this.add({ id: id, parent: 0, weight: this.defaultWeight })\n}\n\nPriorityTree.prototype._removeNode = function _removeNode (node) {\n  delete this.map[node.id]\n  var index = utils.binarySearch(this.list, node, compareChildren)\n  this.list.splice(index, 1)\n  this.count--\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}