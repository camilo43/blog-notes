{"ast":null,"code":"/*\n * http-stream.js: Idomatic buffered stream which pipes additional HTTP information.\n *\n * (C) 2011, Charlie Robbins & the Contributors\n * MIT LICENSE\n *\n */\n\nvar url = require('url'),\n  util = require('util'),\n  qs = require('qs'),\n  HttpStream = require('./http-stream');\nvar RequestStream = module.exports = function (options) {\n  options = options || {};\n  HttpStream.call(this, options);\n  this.on('pipe', this.pipeRequest);\n  this.request = options.request;\n};\nutil.inherits(RequestStream, HttpStream);\n\n//\n// ### function pipeRequest (source)\n// #### @source {ServerRequest|HttpStream} Source stream piping to this instance\n// Pipes additional HTTP request metadata from the `source` HTTP stream (either concrete or\n// abstract) to this instance. e.g. url, headers, query, etc.\n//\n// Remark: Is there anything else we wish to pipe?\n//\nRequestStream.prototype.pipeRequest = function (source) {\n  this.url = this.originalUrl = source.url;\n  this.method = source.method;\n  this.httpVersion = source.httpVersion;\n  this.httpVersionMajor = source.httpVersionMajor;\n  this.httpVersionMinor = source.httpVersionMinor;\n  this.setEncoding = source.setEncoding;\n  this.connection = source.connection;\n  this.socket = source.socket;\n  if (source.query) {\n    this.query = source.query;\n  } else {\n    this.query = ~source.url.indexOf('?') ? qs.parse(url.parse(source.url).query) : {};\n  }\n};\n\n// http.serverRequest methods\n['setEncoding'].forEach(function (method) {\n  RequestStream.prototype[method] = function () {\n    return this.request[method].apply(this.request, arguments);\n  };\n});","map":{"version":3,"names":["url","require","util","qs","HttpStream","RequestStream","module","exports","options","call","on","pipeRequest","request","inherits","prototype","source","originalUrl","method","httpVersion","httpVersionMajor","httpVersionMinor","setEncoding","connection","socket","query","indexOf","parse","forEach","apply","arguments"],"sources":["/Users/juancvegao/Documents/PROGRAMMING/REACT/ejerciciosUniversidad/notes_github/frontend/node_modules/union/lib/request-stream.js"],"sourcesContent":["/*\n * http-stream.js: Idomatic buffered stream which pipes additional HTTP information.\n *\n * (C) 2011, Charlie Robbins & the Contributors\n * MIT LICENSE\n *\n */\n\nvar url = require('url'),\n    util = require('util'),\n    qs = require('qs'),\n    HttpStream = require('./http-stream');\n\nvar RequestStream = module.exports = function (options) {\n  options = options || {};\n  HttpStream.call(this, options);\n\n  this.on('pipe', this.pipeRequest);\n  this.request = options.request;\n};\n\nutil.inherits(RequestStream, HttpStream);\n\n//\n// ### function pipeRequest (source)\n// #### @source {ServerRequest|HttpStream} Source stream piping to this instance\n// Pipes additional HTTP request metadata from the `source` HTTP stream (either concrete or\n// abstract) to this instance. e.g. url, headers, query, etc.\n//\n// Remark: Is there anything else we wish to pipe?\n//\nRequestStream.prototype.pipeRequest = function (source) {\n  this.url = this.originalUrl = source.url;\n  this.method = source.method;\n  this.httpVersion = source.httpVersion;\n  this.httpVersionMajor = source.httpVersionMajor;\n  this.httpVersionMinor = source.httpVersionMinor;\n  this.setEncoding = source.setEncoding;\n  this.connection = source.connection;\n  this.socket = source.socket;\n\n  if (source.query) {\n    this.query = source.query;\n  }\n  else {\n    this.query = ~source.url.indexOf('?')\n      ? qs.parse(url.parse(source.url).query)\n      : {};\n  }\n};\n\n// http.serverRequest methods\n['setEncoding'].forEach(function (method) {\n  RequestStream.prototype[method] = function () {\n    return this.request[method].apply(this.request, arguments);\n  };\n});\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;EACpBC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;EACtBE,EAAE,GAAGF,OAAO,CAAC,IAAI,CAAC;EAClBG,UAAU,GAAGH,OAAO,CAAC,eAAe,CAAC;AAEzC,IAAII,aAAa,GAAGC,MAAM,CAACC,OAAO,GAAG,UAAUC,OAAO,EAAE;EACtDA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACvBJ,UAAU,CAACK,IAAI,CAAC,IAAI,EAAED,OAAO,CAAC;EAE9B,IAAI,CAACE,EAAE,CAAC,MAAM,EAAE,IAAI,CAACC,WAAW,CAAC;EACjC,IAAI,CAACC,OAAO,GAAGJ,OAAO,CAACI,OAAO;AAChC,CAAC;AAEDV,IAAI,CAACW,QAAQ,CAACR,aAAa,EAAED,UAAU,CAAC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,aAAa,CAACS,SAAS,CAACH,WAAW,GAAG,UAAUI,MAAM,EAAE;EACtD,IAAI,CAACf,GAAG,GAAG,IAAI,CAACgB,WAAW,GAAGD,MAAM,CAACf,GAAG;EACxC,IAAI,CAACiB,MAAM,GAAGF,MAAM,CAACE,MAAM;EAC3B,IAAI,CAACC,WAAW,GAAGH,MAAM,CAACG,WAAW;EACrC,IAAI,CAACC,gBAAgB,GAAGJ,MAAM,CAACI,gBAAgB;EAC/C,IAAI,CAACC,gBAAgB,GAAGL,MAAM,CAACK,gBAAgB;EAC/C,IAAI,CAACC,WAAW,GAAGN,MAAM,CAACM,WAAW;EACrC,IAAI,CAACC,UAAU,GAAGP,MAAM,CAACO,UAAU;EACnC,IAAI,CAACC,MAAM,GAAGR,MAAM,CAACQ,MAAM;EAE3B,IAAIR,MAAM,CAACS,KAAK,EAAE;IAChB,IAAI,CAACA,KAAK,GAAGT,MAAM,CAACS,KAAK;EAC3B,CAAC,MACI;IACH,IAAI,CAACA,KAAK,GAAG,CAACT,MAAM,CAACf,GAAG,CAACyB,OAAO,CAAC,GAAG,CAAC,GACjCtB,EAAE,CAACuB,KAAK,CAAC1B,GAAG,CAAC0B,KAAK,CAACX,MAAM,CAACf,GAAG,CAAC,CAACwB,KAAK,CAAC,GACrC,CAAC,CAAC;EACR;AACF,CAAC;;AAED;AACA,CAAC,aAAa,CAAC,CAACG,OAAO,CAAC,UAAUV,MAAM,EAAE;EACxCZ,aAAa,CAACS,SAAS,CAACG,MAAM,CAAC,GAAG,YAAY;IAC5C,OAAO,IAAI,CAACL,OAAO,CAACK,MAAM,CAAC,CAACW,KAAK,CAAC,IAAI,CAAChB,OAAO,EAAEiB,SAAS,CAAC;EAC5D,CAAC;AACH,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}