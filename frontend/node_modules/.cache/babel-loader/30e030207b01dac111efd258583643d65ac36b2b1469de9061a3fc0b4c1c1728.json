{"ast":null,"code":"var hpack = require('../hpack');\nvar utils = hpack.utils;\nvar huffman = hpack.huffman.encode;\nvar assert = utils.assert;\nvar WBuf = require('wbuf');\nfunction Encoder() {\n  this.buffer = new WBuf();\n  this.word = 0;\n  this.bitOffset = 0;\n}\nmodule.exports = Encoder;\nEncoder.create = function create() {\n  return new Encoder();\n};\nEncoder.prototype.render = function render() {\n  return this.buffer.render();\n};\nEncoder.prototype.encodeBit = function encodeBit(bit) {\n  var octet;\n  this.word <<= 1;\n  this.word |= bit;\n  this.bitOffset++;\n  if (this.bitOffset === 8) {\n    this.buffer.writeUInt8(this.word);\n    this.word = 0;\n    this.bitOffset = 0;\n  }\n};\nEncoder.prototype.encodeBits = function encodeBits(bits, len) {\n  var left = bits;\n  var leftLen = len;\n  while (leftLen > 0) {\n    var avail = Math.min(leftLen, 8 - this.bitOffset);\n    var toWrite = left >>> leftLen - avail;\n    if (avail === 8) {\n      this.buffer.writeUInt8(toWrite);\n    } else {\n      this.word <<= avail;\n      this.word |= toWrite;\n      this.bitOffset += avail;\n      if (this.bitOffset === 8) {\n        this.buffer.writeUInt8(this.word);\n        this.word = 0;\n        this.bitOffset = 0;\n      }\n    }\n    leftLen -= avail;\n    left &= (1 << leftLen) - 1;\n  }\n};\n\n// Just for testing\nEncoder.prototype.skipBits = function skipBits(num) {\n  this.bitOffset += num;\n  this.buffer.skip(this.bitOffset >> 3);\n  this.bitOffset &= 0x7;\n};\nEncoder.prototype.encodeInt = function encodeInt(num) {\n  var prefix = 8 - this.bitOffset;\n\n  // We are going to end up octet-aligned\n  this.bitOffset = 0;\n  var max = (1 << prefix) - 1;\n\n  // Fast case - int fits into the prefix\n  if (num < max) {\n    this.buffer.writeUInt8(this.word << prefix | num);\n    return octet;\n  }\n  var left = num - max;\n  this.buffer.writeUInt8(this.word << prefix | max);\n  do {\n    var octet = left & 0x7f;\n    left >>= 7;\n    if (left !== 0) octet |= 0x80;\n    this.buffer.writeUInt8(octet);\n  } while (left !== 0);\n};\nEncoder.prototype.encodeStr = function encodeStr(value, isHuffman) {\n  this.encodeBit(isHuffman ? 1 : 0);\n  if (!isHuffman) {\n    this.buffer.reserve(value.length + 1);\n    this.encodeInt(value.length);\n    for (var i = 0; i < value.length; i++) this.buffer.writeUInt8(value[i]);\n    return;\n  }\n  var codes = [];\n  var len = 0;\n  var pad = 0;\n  for (var i = 0; i < value.length; i++) {\n    var code = huffman[value[i]];\n    codes.push(code);\n    len += code[0];\n  }\n  if (len % 8 !== 0) pad = 8 - len % 8;\n  len += pad;\n  this.buffer.reserve(len / 8 + 1);\n  this.encodeInt(len / 8);\n  for (var i = 0; i < codes.length; i++) {\n    var code = codes[i];\n    this.encodeBits(code[1], code[0]);\n  }\n\n  // Append padding\n  this.encodeBits(0xff >>> 8 - pad, pad);\n};","map":{"version":3,"names":["hpack","require","utils","huffman","encode","assert","WBuf","Encoder","buffer","word","bitOffset","module","exports","create","prototype","render","encodeBit","bit","octet","writeUInt8","encodeBits","bits","len","left","leftLen","avail","Math","min","toWrite","skipBits","num","skip","encodeInt","prefix","max","encodeStr","value","isHuffman","reserve","length","i","codes","pad","code","push"],"sources":["/Users/juancvegao/Documents/PROGRAMMING/REACT/ejerciciosUniversidad/notes_github/frontend/node_modules/hpack.js/lib/hpack/encoder.js"],"sourcesContent":["var hpack = require('../hpack');\nvar utils = hpack.utils;\nvar huffman = hpack.huffman.encode;\nvar assert = utils.assert;\n\nvar WBuf = require('wbuf');\n\nfunction Encoder() {\n  this.buffer = new WBuf();\n  this.word = 0;\n  this.bitOffset = 0;\n}\nmodule.exports = Encoder;\n\nEncoder.create = function create() {\n  return new Encoder();\n};\n\nEncoder.prototype.render = function render() {\n  return this.buffer.render();\n};\n\nEncoder.prototype.encodeBit = function encodeBit(bit) {\n  var octet;\n\n  this.word <<= 1;\n  this.word |= bit;\n  this.bitOffset++;\n\n  if (this.bitOffset === 8) {\n    this.buffer.writeUInt8(this.word);\n    this.word = 0;\n    this.bitOffset = 0;\n  }\n};\n\nEncoder.prototype.encodeBits = function encodeBits(bits, len) {\n  var left = bits;\n  var leftLen = len;\n\n  while (leftLen > 0) {\n    var avail = Math.min(leftLen, 8 - this.bitOffset);\n    var toWrite = left >>> (leftLen - avail);\n\n    if (avail === 8) {\n      this.buffer.writeUInt8(toWrite);\n    } else {\n      this.word <<= avail;\n      this.word |= toWrite;\n      this.bitOffset += avail;\n      if (this.bitOffset === 8) {\n        this.buffer.writeUInt8(this.word);\n        this.word = 0;\n        this.bitOffset = 0;\n      }\n    }\n\n    leftLen -= avail;\n    left &= (1 << leftLen) - 1;\n  }\n};\n\n// Just for testing\nEncoder.prototype.skipBits = function skipBits(num) {\n  this.bitOffset += num;\n  this.buffer.skip(this.bitOffset >> 3);\n  this.bitOffset &= 0x7;\n};\n\nEncoder.prototype.encodeInt = function encodeInt(num) {\n  var prefix = 8 - this.bitOffset;\n\n  // We are going to end up octet-aligned\n  this.bitOffset = 0;\n\n  var max = (1 << prefix) - 1;\n\n  // Fast case - int fits into the prefix\n  if (num < max) {\n    this.buffer.writeUInt8((this.word << prefix) | num);\n    return octet;\n  }\n\n  var left = num - max;\n  this.buffer.writeUInt8((this.word << prefix) | max);\n  do {\n    var octet = left & 0x7f;\n    left >>= 7;\n    if (left !== 0)\n      octet |= 0x80;\n\n    this.buffer.writeUInt8(octet);\n  } while (left !== 0);\n};\n\nEncoder.prototype.encodeStr = function encodeStr(value, isHuffman) {\n  this.encodeBit(isHuffman ? 1 : 0);\n\n  if (!isHuffman) {\n    this.buffer.reserve(value.length + 1);\n    this.encodeInt(value.length);\n    for (var i = 0; i < value.length; i++)\n      this.buffer.writeUInt8(value[i]);\n    return;\n  }\n\n  var codes = [];\n  var len = 0;\n  var pad = 0;\n\n  for (var i = 0; i < value.length; i++) {\n    var code = huffman[value[i]];\n    codes.push(code);\n    len += code[0];\n  }\n  if (len % 8 !== 0)\n    pad = 8 - (len % 8);\n  len += pad;\n\n  this.buffer.reserve((len / 8) + 1);\n  this.encodeInt(len / 8);\n  for (var i = 0; i < codes.length; i++) {\n    var code = codes[i];\n    this.encodeBits(code[1], code[0]);\n  }\n\n  // Append padding\n  this.encodeBits(0xff >>> (8 - pad), pad);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}