{"ast":null,"code":"/**\n * Specification: http://www.w3.org/TR/2012/WD-cors-20120403/\n * W3C Working Draft 3 April 2012\n */\n\"use strict\";\n\n/*jshint node:true */\nvar simpleMethods, simpleRequestHeaders, simpleResponseHeaders, toLowerCase, checkOriginMatch;\n\n// A method is said to be a simple method if it is a case-sensitive match for one of the following:\nObject.defineProperty(exports, \"simpleMethods\", {\n  get: function () {\n    return [\"GET\", \"HEAD\", \"POST\"];\n  }\n});\nsimpleMethods = exports.simpleMethods;\n\n// A header is said to be a simple header if the header field name is an ASCII case-insensitive match for one of\n// the following:\nObject.defineProperty(exports, \"simpleRequestHeaders\", {\n  get: function () {\n    return [\"accept\", \"accept-language\", \"content-language\", \"content-type\"];\n  }\n});\nsimpleRequestHeaders = exports.simpleRequestHeaders;\n\n// A header is said to be a simple response header if the header field name is an ASCII case-insensitive\n// match for one of the following:\nObject.defineProperty(exports, \"simpleResponseHeaders\", {\n  get: function () {\n    return [\"cache-control\", \"content-language\", \"content-type\", \"expires\", \"last-modified\", \"pragma\"];\n  }\n});\nsimpleResponseHeaders = exports.simpleResponseHeaders;\ntoLowerCase = function (array) {\n  return array.map(function (el) {\n    return el.toLowerCase();\n  });\n};\ncheckOriginMatch = function (originHeader, origins, callback) {\n  if (typeof origins === \"function\") {\n    origins(originHeader, function (err, allow) {\n      callback(err, allow);\n    });\n  } else if (origins.length > 0) {\n    callback(null, origins.some(function (origin) {\n      return origin === originHeader;\n    }));\n  } else {\n    // Always matching is acceptable since the list of origins can be unbounded.\n    callback(null, true);\n  }\n};\nexports.create = function (options) {\n  options = options || {};\n  options.origins = options.origins || [];\n  options.methods = options.methods || simpleMethods;\n  if (options.hasOwnProperty(\"requestHeaders\") === true) {\n    options.requestHeaders = toLowerCase(options.requestHeaders);\n  } else {\n    options.requestHeaders = simpleRequestHeaders;\n  }\n  if (options.hasOwnProperty(\"responseHeaders\") === true) {\n    options.responseHeaders = toLowerCase(options.responseHeaders);\n  } else {\n    options.responseHeaders = simpleResponseHeaders;\n  }\n  options.maxAge = options.maxAge || null;\n  options.supportsCredentials = options.supportsCredentials || false;\n  if (options.hasOwnProperty(\"endPreflightRequests\") === false) {\n    options.endPreflightRequests = true;\n  }\n  return function (req, res, next) {\n    var methodMatches, headersMatch, requestMethod, requestHeaders, exposedHeaders, endPreflight;\n    // If the Origin header is not present terminate this set of steps.\n    if (!req.headers.hasOwnProperty(\"origin\")) {\n      // The request is outside the scope of the CORS specification. If there is no Origin header,\n      // it could be a same-origin request. Let's let the user-agent handle this situation.\n      next();\n    } else {\n      // If the value of the Origin header is not a case-sensitive match for any of the values in\n      // list of origins, do not set any additional headers and terminate this set of steps.\n      checkOriginMatch(req.headers.origin, options.origins, function (err, originMatches) {\n        if (err !== null) {\n          next(err);\n        } else {\n          if (typeof originMatches !== \"boolean\" || originMatches === false) {\n            next();\n          } else {\n            // Respond to preflight request.\n            if (req.method === \"OPTIONS\") {\n              endPreflight = function () {\n                if (options.endPreflightRequests === true) {\n                  res.writeHead(204);\n                  res.end();\n                } else {\n                  next();\n                }\n              };\n              // If there is no Access-Control-Request-Method header or if parsing failed, do not set\n              // any additional headers and terminate this set of steps.\n              if (!req.headers.hasOwnProperty(\"access-control-request-method\")) {\n                endPreflight();\n              } else {\n                requestMethod = req.headers[\"access-control-request-method\"];\n                // If there are no Access-Control-Request-Headers headers let header field-names be the\n                // empty list. If parsing failed do not set any additional headers and terminate this set\n                // of steps.\n                // Checking for an empty header is a workaround for a bug Chrome 52:\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=633729\n                if (req.headers.hasOwnProperty(\"access-control-request-headers\") && req.headers[\"access-control-request-headers\"] !== \"\") {\n                  requestHeaders = toLowerCase(req.headers[\"access-control-request-headers\"].split(/,\\s*/));\n                } else {\n                  requestHeaders = [];\n                }\n                // If method is not a case-sensitive match for any of the values in list of methods do not\n                // set any additional headers and terminate this set of steps.\n                methodMatches = options.methods.indexOf(requestMethod) !== -1;\n                if (methodMatches === false) {\n                  endPreflight();\n                } else {\n                  // If any of the header field-names is not a ASCII case-insensitive match for any of\n                  // the values in list of headers do not set any additional headers and terminate this\n                  // set of steps.\n                  headersMatch = requestHeaders.every(function (requestHeader) {\n                    // Browsers automatically add Origin to Access-Control-Request-Headers. However,\n                    // Origin is not one of the simple request headers. Therefore, the header is\n                    // accepted even if it is not in the list of request headers because CORS would\n                    // not work without it.\n                    if (requestHeader === \"origin\") {\n                      return true;\n                    } else {\n                      if (options.requestHeaders.indexOf(requestHeader) !== -1) {\n                        return true;\n                      } else {\n                        return false;\n                      }\n                    }\n                  });\n                  if (headersMatch === false) {\n                    endPreflight();\n                  } else {\n                    if (options.supportsCredentials === true) {\n                      // If the resource supports credentials add a single Access-Control-Allow-Origin\n                      // header, with the value of the Origin header as value, and add a single\n                      // Access-Control-Allow-Credentials header with the literal string \"true\"\n                      // as value.\n                      res.setHeader(\"Access-Control-Allow-Origin\", req.headers.origin);\n                      res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n                    } else {\n                      // Otherwise, add a single Access-Control-Allow-Origin header, with either the\n                      // value of the Origin header or the string \"*\" as value.\n                      if (options.origins.length > 0 || typeof options.origins === \"function\") {\n                        res.setHeader(\"Access-Control-Allow-Origin\", req.headers.origin);\n                      } else {\n                        res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                      }\n                    }\n                    // Optionally add a single Access-Control-Max-Age header with as value the amount\n                    // of seconds the user agent is allowed to cache the result of the request.\n                    if (options.maxAge !== null) {\n                      res.setHeader(\"Access-Control-Max-Age\", options.maxAge);\n                    }\n                    // Add one or more Access-Control-Allow-Methods headers consisting of (a subset\n                    // of) the list of methods.\n                    res.setHeader(\"Access-Control-Allow-Methods\", options.methods.join(\",\"));\n                    // Add one or more Access-Control-Allow-Headers headers consisting of (a subset\n                    // of) the list of headers.\n                    res.setHeader(\"Access-Control-Allow-Headers\", options.requestHeaders.join(\",\"));\n                    // And out.\n                    endPreflight();\n                  }\n                }\n              }\n            } else {\n              if (options.supportsCredentials === true) {\n                // If the resource supports credentials add a single Access-Control-Allow-Origin header,\n                // with the value of the Origin header as value, and add a single\n                // Access-Control-Allow-Credentials header with the literal string \"true\" as value.\n                res.setHeader(\"Access-Control-Allow-Origin\", req.headers.origin);\n                res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n              } else {\n                // Otherwise, add a single Access-Control-Allow-Origin header, with either the value of\n                // the Origin header or the literal string \"*\" as value.\n                // If the list of origins is empty, use \"*\" as value.\n                if (options.origins.length > 0 || typeof options.origins === \"function\") {\n                  res.setHeader(\"Access-Control-Allow-Origin\", req.headers.origin);\n                } else {\n                  res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                }\n              }\n              // If the list of exposed headers is not empty add one or more Access-Control-Expose-Headers\n              // headers, with as values the header field names given in the list of exposed headers.\n              exposedHeaders = options.responseHeaders.filter(function (optionsResponseHeader) {\n                return simpleResponseHeaders.indexOf(optionsResponseHeader) === -1;\n              });\n              if (exposedHeaders.length > 0) {\n                res.setHeader(\"Access-Control-Expose-Headers\", exposedHeaders.join(\",\"));\n              }\n              // And out.\n              next();\n            }\n          }\n        }\n      });\n    }\n  };\n};","map":{"version":3,"names":["simpleMethods","simpleRequestHeaders","simpleResponseHeaders","toLowerCase","checkOriginMatch","Object","defineProperty","exports","get","array","map","el","originHeader","origins","callback","err","allow","length","some","origin","create","options","methods","hasOwnProperty","requestHeaders","responseHeaders","maxAge","supportsCredentials","endPreflightRequests","req","res","next","methodMatches","headersMatch","requestMethod","exposedHeaders","endPreflight","headers","originMatches","method","writeHead","end","split","indexOf","every","requestHeader","setHeader","join","filter","optionsResponseHeader"],"sources":["/Users/juancvegao/Documents/PROGRAMMING/REACT/ejerciciosUniversidad/notes_github/frontend/node_modules/corser/lib/corser.js"],"sourcesContent":["/**\n * Specification: http://www.w3.org/TR/2012/WD-cors-20120403/\n * W3C Working Draft 3 April 2012\n */\n\"use strict\";\n\n/*jshint node:true */\n\nvar simpleMethods, simpleRequestHeaders, simpleResponseHeaders, toLowerCase, checkOriginMatch;\n\n// A method is said to be a simple method if it is a case-sensitive match for one of the following:\nObject.defineProperty(exports, \"simpleMethods\", {\n    get: function () {\n        return [\n            \"GET\",\n            \"HEAD\",\n            \"POST\"\n        ];\n    }\n});\nsimpleMethods = exports.simpleMethods;\n\n// A header is said to be a simple header if the header field name is an ASCII case-insensitive match for one of\n// the following:\nObject.defineProperty(exports, \"simpleRequestHeaders\", {\n    get: function () {\n        return [\n            \"accept\",\n            \"accept-language\",\n            \"content-language\",\n            \"content-type\"\n        ];\n    }\n});\nsimpleRequestHeaders = exports.simpleRequestHeaders;\n\n// A header is said to be a simple response header if the header field name is an ASCII case-insensitive\n// match for one of the following:\nObject.defineProperty(exports, \"simpleResponseHeaders\", {\n    get: function () {\n        return [\n            \"cache-control\",\n            \"content-language\",\n            \"content-type\",\n            \"expires\",\n            \"last-modified\",\n            \"pragma\"\n        ];\n    }\n});\nsimpleResponseHeaders = exports.simpleResponseHeaders;\n\ntoLowerCase = function (array) {\n    return array.map(function (el) {\n        return el.toLowerCase();\n    });\n};\n\ncheckOriginMatch = function (originHeader, origins, callback) {\n    if (typeof origins === \"function\") {\n        origins(originHeader, function (err, allow) {\n            callback(err, allow);\n        });\n    } else if (origins.length > 0) {\n        callback(null, origins.some(function (origin) {\n            return origin === originHeader;\n        }));\n    } else {\n        // Always matching is acceptable since the list of origins can be unbounded.\n        callback(null, true);\n    }\n};\n\nexports.create = function (options) {\n    options = options || {};\n    options.origins = options.origins || [];\n    options.methods = options.methods || simpleMethods;\n    if (options.hasOwnProperty(\"requestHeaders\") === true) {\n        options.requestHeaders = toLowerCase(options.requestHeaders);\n    } else {\n        options.requestHeaders = simpleRequestHeaders;\n    }\n    if (options.hasOwnProperty(\"responseHeaders\") === true) {\n        options.responseHeaders = toLowerCase(options.responseHeaders);\n    } else {\n        options.responseHeaders = simpleResponseHeaders;\n    }\n    options.maxAge = options.maxAge || null;\n    options.supportsCredentials = options.supportsCredentials || false;\n    if (options.hasOwnProperty(\"endPreflightRequests\") === false) {\n        options.endPreflightRequests = true;\n    }\n    return function (req, res, next) {\n        var methodMatches, headersMatch, requestMethod, requestHeaders, exposedHeaders, endPreflight;\n        // If the Origin header is not present terminate this set of steps.\n        if (!req.headers.hasOwnProperty(\"origin\")) {\n            // The request is outside the scope of the CORS specification. If there is no Origin header,\n            // it could be a same-origin request. Let's let the user-agent handle this situation.\n            next();\n        } else {\n            // If the value of the Origin header is not a case-sensitive match for any of the values in\n            // list of origins, do not set any additional headers and terminate this set of steps.\n            checkOriginMatch(req.headers.origin, options.origins, function (err, originMatches) {\n                if (err !== null) {\n                    next(err);\n                } else {\n                    if (typeof originMatches !== \"boolean\" || originMatches === false) {\n                        next();\n                    } else {\n                        // Respond to preflight request.\n                        if (req.method === \"OPTIONS\") {\n                            endPreflight = function () {\n                                if (options.endPreflightRequests === true) {\n                                    res.writeHead(204);\n                                    res.end();\n                                } else {\n                                    next();\n                                }\n                            };\n                            // If there is no Access-Control-Request-Method header or if parsing failed, do not set\n                            // any additional headers and terminate this set of steps.\n                            if (!req.headers.hasOwnProperty(\"access-control-request-method\")) {\n                                endPreflight();\n                            } else {\n                                requestMethod = req.headers[\"access-control-request-method\"];\n                                // If there are no Access-Control-Request-Headers headers let header field-names be the\n                                // empty list. If parsing failed do not set any additional headers and terminate this set\n                                // of steps.\n                                // Checking for an empty header is a workaround for a bug Chrome 52:\n                                // https://bugs.chromium.org/p/chromium/issues/detail?id=633729\n                                if (req.headers.hasOwnProperty(\"access-control-request-headers\") && req.headers[\"access-control-request-headers\"] !== \"\") {\n                                    requestHeaders = toLowerCase(req.headers[\"access-control-request-headers\"].split(/,\\s*/));\n                                } else {\n                                    requestHeaders = [];\n                                }\n                                // If method is not a case-sensitive match for any of the values in list of methods do not\n                                // set any additional headers and terminate this set of steps.\n                                methodMatches = options.methods.indexOf(requestMethod) !== -1;\n                                if (methodMatches === false) {\n                                    endPreflight();\n                                } else {\n                                    // If any of the header field-names is not a ASCII case-insensitive match for any of\n                                    // the values in list of headers do not set any additional headers and terminate this\n                                    // set of steps.\n                                    headersMatch = requestHeaders.every(function (requestHeader) {\n                                        // Browsers automatically add Origin to Access-Control-Request-Headers. However,\n                                        // Origin is not one of the simple request headers. Therefore, the header is\n                                        // accepted even if it is not in the list of request headers because CORS would\n                                        // not work without it.\n                                        if (requestHeader === \"origin\") {\n                                            return true;\n                                        } else {\n                                            if (options.requestHeaders.indexOf(requestHeader) !== -1) {\n                                                return true;\n                                            } else {\n                                                return false;\n                                            }\n                                        }\n                                    });\n                                    if (headersMatch === false) {\n                                        endPreflight();\n                                    } else {\n                                        if (options.supportsCredentials === true) {\n                                            // If the resource supports credentials add a single Access-Control-Allow-Origin\n                                            // header, with the value of the Origin header as value, and add a single\n                                            // Access-Control-Allow-Credentials header with the literal string \"true\"\n                                            // as value.\n                                            res.setHeader(\"Access-Control-Allow-Origin\", req.headers.origin);\n                                            res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n                                        } else {\n                                            // Otherwise, add a single Access-Control-Allow-Origin header, with either the\n                                            // value of the Origin header or the string \"*\" as value.\n                                            if (options.origins.length > 0 || typeof options.origins === \"function\") {\n                                                res.setHeader(\"Access-Control-Allow-Origin\", req.headers.origin);\n                                            } else {\n                                                res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                                            }\n                                        }\n                                        // Optionally add a single Access-Control-Max-Age header with as value the amount\n                                        // of seconds the user agent is allowed to cache the result of the request.\n                                        if (options.maxAge !== null) {\n                                            res.setHeader(\"Access-Control-Max-Age\", options.maxAge);\n                                        }\n                                        // Add one or more Access-Control-Allow-Methods headers consisting of (a subset\n                                        // of) the list of methods.\n                                        res.setHeader(\"Access-Control-Allow-Methods\", options.methods.join(\",\"));\n                                        // Add one or more Access-Control-Allow-Headers headers consisting of (a subset\n                                        // of) the list of headers.\n                                        res.setHeader(\"Access-Control-Allow-Headers\", options.requestHeaders.join(\",\"));\n                                        // And out.\n                                        endPreflight();\n                                    }\n                                }\n                            }\n                        } else {\n                            if (options.supportsCredentials === true) {\n                                // If the resource supports credentials add a single Access-Control-Allow-Origin header,\n                                // with the value of the Origin header as value, and add a single\n                                // Access-Control-Allow-Credentials header with the literal string \"true\" as value.\n                                res.setHeader(\"Access-Control-Allow-Origin\", req.headers.origin);\n                                res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n                            } else {\n                                // Otherwise, add a single Access-Control-Allow-Origin header, with either the value of\n                                // the Origin header or the literal string \"*\" as value.\n                                // If the list of origins is empty, use \"*\" as value.\n                                if (options.origins.length > 0 || typeof options.origins === \"function\") {\n                                    res.setHeader(\"Access-Control-Allow-Origin\", req.headers.origin);\n                                } else {\n                                    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                                }\n                            }\n                            // If the list of exposed headers is not empty add one or more Access-Control-Expose-Headers\n                            // headers, with as values the header field names given in the list of exposed headers.\n                            exposedHeaders = options.responseHeaders.filter(function (optionsResponseHeader) {\n                                return simpleResponseHeaders.indexOf(optionsResponseHeader) === -1;\n                            });\n                            if (exposedHeaders.length > 0) {\n                                res.setHeader(\"Access-Control-Expose-Headers\", exposedHeaders.join(\",\"));\n                            }\n                            // And out.\n                            next();\n                        }\n                    }\n                }\n            });\n        }\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}