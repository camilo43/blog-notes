{"ast":null,"code":"'use strict';\n\nvar zlibpool = exports;\nvar zlib = require('zlib');\nvar transport = require('../../../spdy-transport');\n\n// TODO(indutny): think about it, why has it always been Z_SYNC_FLUSH here.\n// It should be possible to manually flush stuff after the write instead\nfunction createDeflate(version, compression) {\n  var deflate = zlib.createDeflate({\n    dictionary: transport.protocol.spdy.dictionary[version],\n    flush: zlib.Z_SYNC_FLUSH,\n    windowBits: 11,\n    level: compression ? zlib.Z_DEFAULT_COMPRESSION : zlib.Z_NO_COMPRESSION\n  });\n\n  // For node.js v0.8\n  deflate._flush = zlib.Z_SYNC_FLUSH;\n  return deflate;\n}\nfunction createInflate(version) {\n  var inflate = zlib.createInflate({\n    dictionary: transport.protocol.spdy.dictionary[version],\n    flush: zlib.Z_SYNC_FLUSH\n  });\n\n  // For node.js v0.8\n  inflate._flush = zlib.Z_SYNC_FLUSH;\n  return inflate;\n}\nfunction Pool(compression) {\n  this.compression = compression;\n  this.pool = {\n    2: [],\n    3: [],\n    3.1: []\n  };\n}\nzlibpool.create = function create(compression) {\n  return new Pool(compression);\n};\nPool.prototype.get = function get(version) {\n  if (this.pool[version].length > 0) {\n    return this.pool[version].pop();\n  } else {\n    var id = version;\n    return {\n      version: version,\n      compress: createDeflate(id, this.compression),\n      decompress: createInflate(id)\n    };\n  }\n};\nPool.prototype.put = function put(pair) {\n  this.pool[pair.version].push(pair);\n};","map":{"version":3,"names":["zlibpool","exports","zlib","require","transport","createDeflate","version","compression","deflate","dictionary","protocol","spdy","flush","Z_SYNC_FLUSH","windowBits","level","Z_DEFAULT_COMPRESSION","Z_NO_COMPRESSION","_flush","createInflate","inflate","Pool","pool","create","prototype","get","length","pop","id","compress","decompress","put","pair","push"],"sources":["/Users/juancvegao/Documents/PROGRAMMING/REACT/ejerciciosUniversidad/notes_github/frontend/node_modules/spdy-transport/lib/spdy-transport/protocol/spdy/zlib-pool.js"],"sourcesContent":["'use strict'\n\nvar zlibpool = exports\nvar zlib = require('zlib')\n\nvar transport = require('../../../spdy-transport')\n\n// TODO(indutny): think about it, why has it always been Z_SYNC_FLUSH here.\n// It should be possible to manually flush stuff after the write instead\nfunction createDeflate (version, compression) {\n  var deflate = zlib.createDeflate({\n    dictionary: transport.protocol.spdy.dictionary[version],\n    flush: zlib.Z_SYNC_FLUSH,\n    windowBits: 11,\n    level: compression ? zlib.Z_DEFAULT_COMPRESSION : zlib.Z_NO_COMPRESSION\n  })\n\n  // For node.js v0.8\n  deflate._flush = zlib.Z_SYNC_FLUSH\n\n  return deflate\n}\n\nfunction createInflate (version) {\n  var inflate = zlib.createInflate({\n    dictionary: transport.protocol.spdy.dictionary[version],\n    flush: zlib.Z_SYNC_FLUSH\n  })\n\n  // For node.js v0.8\n  inflate._flush = zlib.Z_SYNC_FLUSH\n\n  return inflate\n}\n\nfunction Pool (compression) {\n  this.compression = compression\n  this.pool = {\n    2: [],\n    3: [],\n    3.1: []\n  }\n}\n\nzlibpool.create = function create (compression) {\n  return new Pool(compression)\n}\n\nPool.prototype.get = function get (version) {\n  if (this.pool[version].length > 0) {\n    return this.pool[version].pop()\n  } else {\n    var id = version\n\n    return {\n      version: version,\n      compress: createDeflate(id, this.compression),\n      decompress: createInflate(id)\n    }\n  }\n}\n\nPool.prototype.put = function put (pair) {\n  this.pool[pair.version].push(pair)\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,QAAQ,GAAGC,OAAO;AACtB,IAAIC,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAE1B,IAAIC,SAAS,GAAGD,OAAO,CAAC,yBAAyB,CAAC;;AAElD;AACA;AACA,SAASE,aAAa,CAAEC,OAAO,EAAEC,WAAW,EAAE;EAC5C,IAAIC,OAAO,GAAGN,IAAI,CAACG,aAAa,CAAC;IAC/BI,UAAU,EAAEL,SAAS,CAACM,QAAQ,CAACC,IAAI,CAACF,UAAU,CAACH,OAAO,CAAC;IACvDM,KAAK,EAAEV,IAAI,CAACW,YAAY;IACxBC,UAAU,EAAE,EAAE;IACdC,KAAK,EAAER,WAAW,GAAGL,IAAI,CAACc,qBAAqB,GAAGd,IAAI,CAACe;EACzD,CAAC,CAAC;;EAEF;EACAT,OAAO,CAACU,MAAM,GAAGhB,IAAI,CAACW,YAAY;EAElC,OAAOL,OAAO;AAChB;AAEA,SAASW,aAAa,CAAEb,OAAO,EAAE;EAC/B,IAAIc,OAAO,GAAGlB,IAAI,CAACiB,aAAa,CAAC;IAC/BV,UAAU,EAAEL,SAAS,CAACM,QAAQ,CAACC,IAAI,CAACF,UAAU,CAACH,OAAO,CAAC;IACvDM,KAAK,EAAEV,IAAI,CAACW;EACd,CAAC,CAAC;;EAEF;EACAO,OAAO,CAACF,MAAM,GAAGhB,IAAI,CAACW,YAAY;EAElC,OAAOO,OAAO;AAChB;AAEA,SAASC,IAAI,CAAEd,WAAW,EAAE;EAC1B,IAAI,CAACA,WAAW,GAAGA,WAAW;EAC9B,IAAI,CAACe,IAAI,GAAG;IACV,CAAC,EAAE,EAAE;IACL,CAAC,EAAE,EAAE;IACL,GAAG,EAAE;EACP,CAAC;AACH;AAEAtB,QAAQ,CAACuB,MAAM,GAAG,SAASA,MAAM,CAAEhB,WAAW,EAAE;EAC9C,OAAO,IAAIc,IAAI,CAACd,WAAW,CAAC;AAC9B,CAAC;AAEDc,IAAI,CAACG,SAAS,CAACC,GAAG,GAAG,SAASA,GAAG,CAAEnB,OAAO,EAAE;EAC1C,IAAI,IAAI,CAACgB,IAAI,CAAChB,OAAO,CAAC,CAACoB,MAAM,GAAG,CAAC,EAAE;IACjC,OAAO,IAAI,CAACJ,IAAI,CAAChB,OAAO,CAAC,CAACqB,GAAG,EAAE;EACjC,CAAC,MAAM;IACL,IAAIC,EAAE,GAAGtB,OAAO;IAEhB,OAAO;MACLA,OAAO,EAAEA,OAAO;MAChBuB,QAAQ,EAAExB,aAAa,CAACuB,EAAE,EAAE,IAAI,CAACrB,WAAW,CAAC;MAC7CuB,UAAU,EAAEX,aAAa,CAACS,EAAE;IAC9B,CAAC;EACH;AACF,CAAC;AAEDP,IAAI,CAACG,SAAS,CAACO,GAAG,GAAG,SAASA,GAAG,CAAEC,IAAI,EAAE;EACvC,IAAI,CAACV,IAAI,CAACU,IAAI,CAAC1B,OAAO,CAAC,CAAC2B,IAAI,CAACD,IAAI,CAAC;AACpC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}