{"ast":null,"code":"/* eslint-disable no-process-env */\n/* eslint-disable no-sync */\nvar https = require('https');\nvar fs = require('fs');\nvar core = require('union/lib/core');\nvar RoutingStream = require('union/lib/routing-stream');\nmodule.exports = function (options) {\n  var isArray = Array.isArray(options.after);\n  var credentials;\n  if (!options) {\n    throw new Error('options is required to create a server');\n  }\n  function requestHandler(req, res) {\n    var routingStream = new RoutingStream({\n      before: options.before,\n      buffer: options.buffer,\n      after: isArray && options.after.map(function (After) {\n        return new After();\n      }),\n      request: req,\n      response: res,\n      limit: options.limit,\n      headers: options.headers\n    });\n    routingStream.on('error', function (err) {\n      var fn = options.onError || core.errorHandler;\n      fn(err, routingStream, routingStream.target, function () {\n        routingStream.target.emit('next');\n      });\n    });\n    req.pipe(routingStream);\n  }\n  var serverOptions;\n  serverOptions = options.https;\n  if (!serverOptions.key || !serverOptions.cert) {\n    throw new Error('Both options key and cert are required.');\n  }\n  credentials = {\n    key: fs.readFileSync(serverOptions.key),\n    cert: fs.readFileSync(serverOptions.cert),\n    passphrase: process.env.NODE_HTTP_SERVER_SSL_PASSPHRASE\n  };\n  if (serverOptions.ca) {\n    serverOptions.ca = !Array.isArray(serverOptions.ca) ? [serverOptions.ca] : serverOptions.ca;\n    credentials.ca = serverOptions.ca.map(function (ca) {\n      return fs.readFileSync(ca);\n    });\n  }\n  return https.createServer(credentials, requestHandler);\n};","map":{"version":3,"names":["https","require","fs","core","RoutingStream","module","exports","options","isArray","Array","after","credentials","Error","requestHandler","req","res","routingStream","before","buffer","map","After","request","response","limit","headers","on","err","fn","onError","errorHandler","target","emit","pipe","serverOptions","key","cert","readFileSync","passphrase","process","env","NODE_HTTP_SERVER_SSL_PASSPHRASE","ca","createServer"],"sources":["/Users/juancvegao/Documents/PROGRAMMING/REACT/ejerciciosUniversidad/notes_github/frontend/node_modules/http-server/lib/shims/https-server-shim.js"],"sourcesContent":["/* eslint-disable no-process-env */\n/* eslint-disable no-sync */\nvar https = require('https');\nvar fs = require('fs');\nvar core = require('union/lib/core');\nvar RoutingStream = require('union/lib/routing-stream');\n\nmodule.exports = function (options) {\n  var isArray = Array.isArray(options.after);\n  var credentials;\n\n  if (!options) {\n    throw new Error('options is required to create a server');\n  }\n\n  function requestHandler(req, res) {\n    var routingStream = new RoutingStream({\n      before: options.before,\n      buffer: options.buffer,\n      after:\n        isArray &&\n        options.after.map(function (After) {\n          return new After();\n        }),\n      request: req,\n      response: res,\n      limit: options.limit,\n      headers: options.headers\n    });\n\n    routingStream.on('error', function (err) {\n      var fn = options.onError || core.errorHandler;\n      fn(err, routingStream, routingStream.target, function () {\n        routingStream.target.emit('next');\n      });\n    });\n\n    req.pipe(routingStream);\n  }\n\n  var serverOptions;\n\n  serverOptions = options.https;\n  if (!serverOptions.key || !serverOptions.cert) {\n    throw new Error(\n      'Both options key and cert are required.'\n    );\n  }\n\n  credentials = {\n    key: fs.readFileSync(serverOptions.key),\n    cert: fs.readFileSync(serverOptions.cert),\n    passphrase: process.env.NODE_HTTP_SERVER_SSL_PASSPHRASE\n  };\n\n  if (serverOptions.ca) {\n    serverOptions.ca = !Array.isArray(serverOptions.ca)\n      ? [serverOptions.ca]\n      : serverOptions.ca;\n\n    credentials.ca = serverOptions.ca.map(function (ca) {\n      return fs.readFileSync(ca);\n    });\n  }\n\n  return https.createServer(credentials, requestHandler);\n};\n"],"mappings":"AAAA;AACA;AACA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC5B,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AACtB,IAAIE,IAAI,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AACpC,IAAIG,aAAa,GAAGH,OAAO,CAAC,0BAA0B,CAAC;AAEvDI,MAAM,CAACC,OAAO,GAAG,UAAUC,OAAO,EAAE;EAClC,IAAIC,OAAO,GAAGC,KAAK,CAACD,OAAO,CAACD,OAAO,CAACG,KAAK,CAAC;EAC1C,IAAIC,WAAW;EAEf,IAAI,CAACJ,OAAO,EAAE;IACZ,MAAM,IAAIK,KAAK,CAAC,wCAAwC,CAAC;EAC3D;EAEA,SAASC,cAAc,CAACC,GAAG,EAAEC,GAAG,EAAE;IAChC,IAAIC,aAAa,GAAG,IAAIZ,aAAa,CAAC;MACpCa,MAAM,EAAEV,OAAO,CAACU,MAAM;MACtBC,MAAM,EAAEX,OAAO,CAACW,MAAM;MACtBR,KAAK,EACHF,OAAO,IACPD,OAAO,CAACG,KAAK,CAACS,GAAG,CAAC,UAAUC,KAAK,EAAE;QACjC,OAAO,IAAIA,KAAK,EAAE;MACpB,CAAC,CAAC;MACJC,OAAO,EAAEP,GAAG;MACZQ,QAAQ,EAAEP,GAAG;MACbQ,KAAK,EAAEhB,OAAO,CAACgB,KAAK;MACpBC,OAAO,EAAEjB,OAAO,CAACiB;IACnB,CAAC,CAAC;IAEFR,aAAa,CAACS,EAAE,CAAC,OAAO,EAAE,UAAUC,GAAG,EAAE;MACvC,IAAIC,EAAE,GAAGpB,OAAO,CAACqB,OAAO,IAAIzB,IAAI,CAAC0B,YAAY;MAC7CF,EAAE,CAACD,GAAG,EAAEV,aAAa,EAAEA,aAAa,CAACc,MAAM,EAAE,YAAY;QACvDd,aAAa,CAACc,MAAM,CAACC,IAAI,CAAC,MAAM,CAAC;MACnC,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFjB,GAAG,CAACkB,IAAI,CAAChB,aAAa,CAAC;EACzB;EAEA,IAAIiB,aAAa;EAEjBA,aAAa,GAAG1B,OAAO,CAACP,KAAK;EAC7B,IAAI,CAACiC,aAAa,CAACC,GAAG,IAAI,CAACD,aAAa,CAACE,IAAI,EAAE;IAC7C,MAAM,IAAIvB,KAAK,CACb,yCAAyC,CAC1C;EACH;EAEAD,WAAW,GAAG;IACZuB,GAAG,EAAEhC,EAAE,CAACkC,YAAY,CAACH,aAAa,CAACC,GAAG,CAAC;IACvCC,IAAI,EAAEjC,EAAE,CAACkC,YAAY,CAACH,aAAa,CAACE,IAAI,CAAC;IACzCE,UAAU,EAAEC,OAAO,CAACC,GAAG,CAACC;EAC1B,CAAC;EAED,IAAIP,aAAa,CAACQ,EAAE,EAAE;IACpBR,aAAa,CAACQ,EAAE,GAAG,CAAChC,KAAK,CAACD,OAAO,CAACyB,aAAa,CAACQ,EAAE,CAAC,GAC/C,CAACR,aAAa,CAACQ,EAAE,CAAC,GAClBR,aAAa,CAACQ,EAAE;IAEpB9B,WAAW,CAAC8B,EAAE,GAAGR,aAAa,CAACQ,EAAE,CAACtB,GAAG,CAAC,UAAUsB,EAAE,EAAE;MAClD,OAAOvC,EAAE,CAACkC,YAAY,CAACK,EAAE,CAAC;IAC5B,CAAC,CAAC;EACJ;EAEA,OAAOzC,KAAK,CAAC0C,YAAY,CAAC/B,WAAW,EAAEE,cAAc,CAAC;AACxD,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}