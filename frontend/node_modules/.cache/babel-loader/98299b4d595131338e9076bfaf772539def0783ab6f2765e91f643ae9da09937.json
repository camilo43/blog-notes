{"ast":null,"code":"'use strict';\n\n// NOTE: Mostly copy paste from node\nexports.writeHead = function writeHead(statusCode, reason, obj) {\n  var headers;\n  if (typeof reason === 'string') {\n    // writeHead(statusCode, reasonPhrase[, headers])\n    this.statusMessage = reason;\n  } else {\n    // writeHead(statusCode[, headers])\n    this.statusMessage = this.statusMessage || 'unknown';\n    obj = reason;\n  }\n  this.statusCode = statusCode;\n  if (this._headers) {\n    // Slow-case: when progressive API and header fields are passed.\n    if (obj) {\n      var keys = Object.keys(obj);\n      for (var i = 0; i < keys.length; i++) {\n        var k = keys[i];\n        if (k) this.setHeader(k, obj[k]);\n      }\n    }\n    // only progressive api is used\n    headers = this._renderHeaders();\n  } else {\n    // only writeHead() called\n    headers = obj;\n  }\n  if (statusCode === 204 || statusCode === 304 || statusCode >= 100 && statusCode <= 199) {\n    // RFC 2616, 10.2.5:\n    // The 204 response MUST NOT include a message-body, and thus is always\n    // terminated by the first empty line after the header fields.\n    // RFC 2616, 10.3.5:\n    // The 304 response MUST NOT contain a message-body, and thus is always\n    // terminated by the first empty line after the header fields.\n    // RFC 2616, 10.1 Informational 1xx:\n    // This class of status code indicates a provisional response,\n    // consisting only of the Status-Line and optional headers, and is\n    // terminated by an empty line.\n    this._hasBody = false;\n  }\n\n  // don't keep alive connections where the client expects 100 Continue\n  // but we sent a final status; they may put extra bytes on the wire.\n  if (this._expect_continue && !this._sent100) {\n    this.shouldKeepAlive = false;\n  }\n\n  // Implicit headers sent!\n  this._header = true;\n  this._headerSent = true;\n  if (this.socket._handle) {\n    this.socket._handle._spdyState.stream.respond(this.statusCode, headers);\n  }\n};\nexports.end = function end(data, encoding, callback) {\n  if (!this._headerSent) {\n    this.writeHead(this.statusCode);\n  }\n  if (!this.socket._handle) {\n    return;\n  }\n\n  // Compatibility with Node.js core\n  this.finished = true;\n  var self = this;\n  var handle = this.socket._handle;\n  handle._spdyState.ending = true;\n  this.socket.end(data, encoding, function () {\n    self.constructor.prototype.end.call(self, '', 'utf8', callback);\n  });\n};\nexports.push = function push(path, headers, callback) {\n  var frame = {\n    path: path,\n    method: headers.method ? headers.method.toString() : 'GET',\n    status: headers.status ? parseInt(headers.status, 10) : 200,\n    host: this._req.headers.host,\n    headers: headers.request,\n    response: headers.response\n  };\n  var stream = this.spdyStream;\n  return stream.pushPromise(frame, callback);\n};\nexports.writeContinue = function writeContinue(callback) {\n  if (this.socket._handle) {\n    this.socket._handle._spdyState.stream.respond(100, {}, callback);\n  }\n};","map":{"version":3,"names":["exports","writeHead","statusCode","reason","obj","headers","statusMessage","_headers","keys","Object","i","length","k","setHeader","_renderHeaders","_hasBody","_expect_continue","_sent100","shouldKeepAlive","_header","_headerSent","socket","_handle","_spdyState","stream","respond","end","data","encoding","callback","finished","self","handle","ending","constructor","prototype","call","push","path","frame","method","toString","status","parseInt","host","_req","request","response","spdyStream","pushPromise","writeContinue"],"sources":["/Users/juancvegao/Documents/PROGRAMMING/REACT/ejerciciosUniversidad/notes_github/frontend/node_modules/spdy/lib/spdy/response.js"],"sourcesContent":["'use strict'\n\n// NOTE: Mostly copy paste from node\nexports.writeHead = function writeHead (statusCode, reason, obj) {\n  var headers\n\n  if (typeof reason === 'string') {\n    // writeHead(statusCode, reasonPhrase[, headers])\n    this.statusMessage = reason\n  } else {\n    // writeHead(statusCode[, headers])\n    this.statusMessage =\n      this.statusMessage || 'unknown'\n    obj = reason\n  }\n  this.statusCode = statusCode\n\n  if (this._headers) {\n    // Slow-case: when progressive API and header fields are passed.\n    if (obj) {\n      var keys = Object.keys(obj)\n      for (var i = 0; i < keys.length; i++) {\n        var k = keys[i]\n        if (k) this.setHeader(k, obj[k])\n      }\n    }\n    // only progressive api is used\n    headers = this._renderHeaders()\n  } else {\n    // only writeHead() called\n    headers = obj\n  }\n\n  if (statusCode === 204 || statusCode === 304 ||\n      (statusCode >= 100 && statusCode <= 199)) {\n    // RFC 2616, 10.2.5:\n    // The 204 response MUST NOT include a message-body, and thus is always\n    // terminated by the first empty line after the header fields.\n    // RFC 2616, 10.3.5:\n    // The 304 response MUST NOT contain a message-body, and thus is always\n    // terminated by the first empty line after the header fields.\n    // RFC 2616, 10.1 Informational 1xx:\n    // This class of status code indicates a provisional response,\n    // consisting only of the Status-Line and optional headers, and is\n    // terminated by an empty line.\n    this._hasBody = false\n  }\n\n  // don't keep alive connections where the client expects 100 Continue\n  // but we sent a final status; they may put extra bytes on the wire.\n  if (this._expect_continue && !this._sent100) {\n    this.shouldKeepAlive = false\n  }\n\n  // Implicit headers sent!\n  this._header = true\n  this._headerSent = true\n\n  if (this.socket._handle) { this.socket._handle._spdyState.stream.respond(this.statusCode, headers) }\n}\n\nexports.end = function end (data, encoding, callback) {\n  if (!this._headerSent) {\n    this.writeHead(this.statusCode)\n  }\n\n  if (!this.socket._handle) {\n    return\n  }\n\n  // Compatibility with Node.js core\n  this.finished = true\n\n  var self = this\n  var handle = this.socket._handle\n  handle._spdyState.ending = true\n  this.socket.end(data, encoding, function () {\n    self.constructor.prototype.end.call(self, '', 'utf8', callback)\n  })\n}\n\nexports.push = function push (path, headers, callback) {\n  var frame = {\n    path: path,\n    method: headers.method ? headers.method.toString() : 'GET',\n    status: headers.status ? parseInt(headers.status, 10) : 200,\n    host: this._req.headers.host,\n    headers: headers.request,\n    response: headers.response\n  }\n\n  var stream = this.spdyStream\n  return stream.pushPromise(frame, callback)\n}\n\nexports.writeContinue = function writeContinue (callback) {\n  if (this.socket._handle) {\n    this.socket._handle._spdyState.stream.respond(100, {}, callback)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}